0 program -> stmt-sequence
1 stmt-sequence -> statement stmt'
2 stmt' -> ;statement stmt'
3 stmt' -> $
4 statement -> if-stmt
5 statement -> repeat-stmt
6 statement -> assign-stmt
7 statement -> read-stmt
8 statement -> write-stmt
9 if-stmt -> if exp then stmt-sequence else-part' end
10 else-part' -> else stmt-sequence
11 else-part' -> $
12 repeat-stmt -> repeat stmt-sequence until exp
13 assign-stmt -> identifier := exp
14 read-stmt -> read identifier
15 write-stmt -> write exp
16 exp -> simple-exp cmp-exp'
17 cmp-exp' -> comparison-op simple-exp
18 cmp-exp' -> $
19 comparison-op -> <
20 comparison-op -> =
21 simple-exp -> term term'
22 term' -> addop term
23 term' -> $
24 addop -> +
25 addop -> -
26 term -> factor factor'
27 factor' -> mulop factor
28 factor' -> $
29 mulop -> *
30 mulop -> /
31 factor -> (exp)
32 factor -> number
33 factor -> identifier


0 if
1 then
2 else
3 end
4 repeat
5 until
6 read
7 write
8 +
9 -
10 *
11 /
12 =
13 <
14 (
15 )
16 ;
17 :=
18 num
19 id
20 $


-FIRST-
0 program: if repeat identifier read write
1 stmt-sequence: if repeat identifier read write
2 stmt': ; $ 
3 statement: if repeat identifier read write
4 if-stmt: if 
5 else-part': else $ 
6 repeat-stmt: repeat 
7 assign-stmt: identifier 
8 read-stmt: read     
9 write-stmt: write 
10 exp: ( number identifier 
11 cmp-exp': $ < = 
12 comparison-op: < = 
13 simple-exp: ( number identifier 
14 term': $ + - 
15 addop: + - 
16 term: ( number identifier 
17 factor': $ * / 
18 mulop: * / 
19 factor: ( number identifier 


-FOLLOW-
0 program: # 
1 stmt-sequence: # else end until
2 stmt': # else end until
3 statement: ; # else end until
4 if-stmt: ; # else end until
5 else-part': end 
6 repeat-stmt: ; # else end until
7 assign-stmt: ; # else end until
8 read-stmt: ; # else end until
9 write-stmt: ; # else end until
10 exp: then ; # ) else end until
11 cmp-exp': then ; # ) else end until
12 comparison-op: ( number identifier 
13 simple-exp: < = then ; # ) else end until
14 term': < = then ; # ) else end until
15 addop: ( number identifier 
16 term: + - < = then ; # ) else end until
17 factor': + - < = then ; # ) else end until
18 mulop: ( number identifier 
19 factor: * / + - < = then ; # ) else end until


